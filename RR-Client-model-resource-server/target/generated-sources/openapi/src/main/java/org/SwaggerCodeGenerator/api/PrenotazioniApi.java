/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.SwaggerCodeGenerator.api;

import java.math.BigDecimal;
import org.SwaggerCodeGenerator.model.Prenotazione;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-21T18:10:10.437692200+02:00[Europe/Rome]")
@Validated
@Tag(name = "prenotazioni", description = "the prenotazioni API")
public interface PrenotazioniApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /prenotazioni/amministratori-acquisto : Visualizza le prenotazioni effettuate dai clienti per un acquisto
     * RF-GAA-GV-1 Il sistema dovrà permettere all&#39;amministratore acquisto di visualizzare le prenotazioni di vendita  
     *
     * @return Prenotazioni effettuate dagli utenti per un acquisto (status code 200)
     *         or Errore nella visualizzazione delle prenotazioni (status code 400)
     *         or Non autorizzato a visualizzare le prenotazioni (status code 401)
     */
    @Operation(
        operationId = "prenotazioniAmministratoriAcquistoGet",
        summary = "Visualizza le prenotazioni effettuate dai clienti per un acquisto",
        tags = { "Gestione Vendita [Amministratore-Acquisto]" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazioni effettuate dagli utenti per un acquisto", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella visualizzazione delle prenotazioni"),
            @ApiResponse(responseCode = "401", description = "Non autorizzato a visualizzare le prenotazioni")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/prenotazioni/amministratori-acquisto",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Prenotazione>> prenotazioniAmministratoriAcquistoGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_prenotazione\" : \"2000-01-23T04:56:07.000+00:00\", \"stato\" : \"stato\", \"tipo\" : \"tipo\", \"id_automobile\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"id_utente\" : \"id_utente\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /prenotazioni/amministratori-acquisto/modifica/{id} : Modifica le prenotazioni effettuate dai clienti per un acquisto
     * RF-GAA-GV-2 l sistema dovrà permettere all&#39;amministratore acquisto di accettare le prenotazioni di vendita dei clienti  
     *
     * @param id  (required)
     * @return Prenotazione modificata con successo (status code 200)
     *         or Errore nella modifica della prenotazione (status code 400)
     *         or Non autorizzato a modificare la prenotazione (status code 401)
     */
    @Operation(
        operationId = "prenotazioniAmministratoriAcquistoModificaIdPut",
        summary = "Modifica le prenotazioni effettuate dai clienti per un acquisto",
        tags = { "Gestione Vendita [Amministratore-Acquisto]" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazione modificata con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella modifica della prenotazione"),
            @ApiResponse(responseCode = "401", description = "Non autorizzato a modificare la prenotazione")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/prenotazioni/amministratori-acquisto/modifica/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Prenotazione> prenotazioniAmministratoriAcquistoModificaIdPut(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") BigDecimal id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_prenotazione\" : \"2000-01-23T04:56:07.000+00:00\", \"stato\" : \"stato\", \"tipo\" : \"tipo\", \"id_automobile\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"id_utente\" : \"id_utente\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /prenotazioni/amministratori-noleggio : Visualizza le prenotazioni effettuate dai clienti per un noleggio
     * RF-GAN-GN-1 l sistema dovrà permettere all&#39;amministratore noleggio di visualizzare le prenotazioni di noleggio (fatta da un cliente)  
     *
     * @return Prenotazioni effettuate dagli utenti per un noleggio (status code 200)
     *         or Errore nella visualizzazione delle prenotazioni (status code 400)
     *         or Non autorizzato a visualizzare le prenotazioni (status code 401)
     */
    @Operation(
        operationId = "prenotazioniAmministratoriNoleggioGet",
        summary = "Visualizza le prenotazioni effettuate dai clienti per un noleggio",
        tags = { "Gestione Noleggio [Amministratore-Noleggio]" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazioni effettuate dagli utenti per un noleggio", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella visualizzazione delle prenotazioni"),
            @ApiResponse(responseCode = "401", description = "Non autorizzato a visualizzare le prenotazioni")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/prenotazioni/amministratori-noleggio",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Prenotazione>> prenotazioniAmministratoriNoleggioGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_prenotazione\" : \"2000-01-23T04:56:07.000+00:00\", \"stato\" : \"stato\", \"tipo\" : \"tipo\", \"id_automobile\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"id_utente\" : \"id_utente\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /prenotazioni/amministratori-noleggio/modifica/{id} : Modifica le prenotazioni effettuate dai clienti per un noleggio
     * RF-GAN-GN-2 l sistema dovrà permettere all&#39;amministratore noleggio di modificare le prenotazioni di noleggio  
     *
     * @param id  (required)
     * @return Prenotazioni effettuate dagli utenti per un noleggio (status code 200)
     *         or Errore nella modifica della prenotazione (status code 400)
     *         or Non autorizzato a modificare la prenotazione (status code 401)
     */
    @Operation(
        operationId = "prenotazioniAmministratoriNoleggioModificaIdPut",
        summary = "Modifica le prenotazioni effettuate dai clienti per un noleggio",
        tags = { "Gestione Noleggio [Amministratore-Noleggio]" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazioni effettuate dagli utenti per un noleggio", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella modifica della prenotazione"),
            @ApiResponse(responseCode = "401", description = "Non autorizzato a modificare la prenotazione")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/prenotazioni/amministratori-noleggio/modifica/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Prenotazione> prenotazioniAmministratoriNoleggioModificaIdPut(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") BigDecimal id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_prenotazione\" : \"2000-01-23T04:56:07.000+00:00\", \"stato\" : \"stato\", \"tipo\" : \"tipo\", \"id_automobile\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"id_utente\" : \"id_utente\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /prenotazioni/clienti/acquisto : Visualizza prenotazioni acquisto effettuate dall&#39;utente
     * RF-GC-PA-2 Il sistema dovrà permettere al cliente di visualizzare le prenotazioni per l’acquisto  
     *
     * @param principal  (required)
     * @return Prenotazioni effettuate (status code 200)
     *         or Errore nella visualizzazione delle prenotazioni (status code 400)
     *         or Non autoriazzato a visualizzare le prenotazioni (status code 401)
     */
    @Operation(
        operationId = "prenotazioniClientiAcquistoGet",
        summary = "Visualizza prenotazioni acquisto effettuate dall'utente",
        tags = { "Gestione Prenotazione Acquisto ed Acquisto [Clienti]" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazioni effettuate", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella visualizzazione delle prenotazioni"),
            @ApiResponse(responseCode = "401", description = "Non autoriazzato a visualizzare le prenotazioni")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/prenotazioni/clienti/acquisto",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Prenotazione>> prenotazioniClientiAcquistoGet(
        @Parameter(name = "principal", description = "", required = true) @RequestHeader(value = "principal", required = true) String principal
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_prenotazione\" : \"2000-01-23T04:56:07.000+00:00\", \"stato\" : \"stato\", \"tipo\" : \"tipo\", \"id_automobile\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"id_utente\" : \"id_utente\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /prenotazioni/clienti/acquisto/inserimento : Inserimento prenotazione veicolo acquisto
     * RF-GC-PA-1 Il sistema dovrà permettere al cliente di effettuare prenotazioni di veicoli per l&#39;acquisto  
     *
     * @param prenotazione  (required)
     * @return Prenotazione avvenuta con successo (status code 200)
     *         or Errore nella prenotazione del veicolo (status code 400)
     *         or Non autorizzato a prenotare il veicolo (status code 401)
     */
    @Operation(
        operationId = "prenotazioniClientiAcquistoInserimentoPost",
        summary = "Inserimento prenotazione veicolo acquisto",
        tags = { "Gestione Prenotazione Acquisto ed Acquisto [Clienti]" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazione avvenuta con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella prenotazione del veicolo"),
            @ApiResponse(responseCode = "401", description = "Non autorizzato a prenotare il veicolo")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/prenotazioni/clienti/acquisto/inserimento",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Prenotazione> prenotazioniClientiAcquistoInserimentoPost(
        @Parameter(name = "Prenotazione", description = "", required = true) @Valid @RequestBody Prenotazione prenotazione
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_prenotazione\" : \"2000-01-23T04:56:07.000+00:00\", \"stato\" : \"stato\", \"tipo\" : \"tipo\", \"id_automobile\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"id_utente\" : \"id_utente\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /prenotazioni/clienti/noleggio : Visualizza prenotazioni effettuate dall&#39;utente
     * RF-GC-GN-3 Il sistema dovrà permettere al cliente di visualizzare i propri contratti di noleggio  
     *
     * @param principal  (required)
     * @return Prenotazioni noleggio effettuate (status code 200)
     *         or Errore nella visualizzazione delle prenotazioni (status code 400)
     *         or Non autorizzato a visualizzare le prenotazioni (status code 401)
     */
    @Operation(
        operationId = "prenotazioniClientiNoleggioGet",
        summary = "Visualizza prenotazioni effettuate dall'utente",
        tags = { "Gestione Prenotazione Noleggi e Noleggi [Cliente]" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazioni noleggio effettuate", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella visualizzazione delle prenotazioni"),
            @ApiResponse(responseCode = "401", description = "Non autorizzato a visualizzare le prenotazioni")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/prenotazioni/clienti/noleggio",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Prenotazione>> prenotazioniClientiNoleggioGet(
        @Parameter(name = "principal", description = "", required = true) @RequestHeader(value = "principal", required = true) String principal
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_prenotazione\" : \"2000-01-23T04:56:07.000+00:00\", \"stato\" : \"stato\", \"tipo\" : \"tipo\", \"id_automobile\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"id_utente\" : \"id_utente\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /prenotazioni/clienti/noleggio/inserimento : Inserimento prenotazione veicolo per il noleggio
     * RF-GC-GN-1 Il sistema dovrà permettere al cliente di prenotare veicoli per il noleggio (ordine accettato dall’amministratore noleggio)  
     *
     * @param prenotazione  (required)
     * @return Prenotazione avvenuta con successo (status code 200)
     *         or Errore nella prenotazione del veicolo (status code 400)
     *         or Non autorizzato a prenotare il veicolo (status code 401)
     */
    @Operation(
        operationId = "prenotazioniClientiNoleggioInserimentoPost",
        summary = "Inserimento prenotazione veicolo per il noleggio",
        tags = { "Gestione Prenotazione Noleggi e Noleggi [Cliente]" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazione avvenuta con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "400", description = "Errore nella prenotazione del veicolo"),
            @ApiResponse(responseCode = "401", description = "Non autorizzato a prenotare il veicolo")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/prenotazioni/clienti/noleggio/inserimento",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Prenotazione> prenotazioniClientiNoleggioInserimentoPost(
        @Parameter(name = "Prenotazione", description = "", required = true) @Valid @RequestBody Prenotazione prenotazione
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data_prenotazione\" : \"2000-01-23T04:56:07.000+00:00\", \"stato\" : \"stato\", \"tipo\" : \"tipo\", \"id_automobile\" : 6.027456183070403, \"id\" : 0.8008281904610115, \"id_utente\" : \"id_utente\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
